# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import kara_storage_pb2 as kara__storage__pb2


class KaraGatewayStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamDataset = channel.stream_stream(
                '/KaraGateway/StreamDataset',
                request_serializer=kara__storage__pb2.KaraRequest.SerializeToString,
                response_deserializer=kara__storage__pb2.KaraResponse.FromString,
                )
        self.StreamObject = channel.stream_stream(
                '/KaraGateway/StreamObject',
                request_serializer=kara__storage__pb2.KaraRequest.SerializeToString,
                response_deserializer=kara__storage__pb2.KaraResponse.FromString,
                )
        self.GetMeta = channel.unary_unary(
                '/KaraGateway/GetMeta',
                request_serializer=kara__storage__pb2.KaraRequest.SerializeToString,
                response_deserializer=kara__storage__pb2.KaraResponse.FromString,
                )
        self.PutMeta = channel.unary_unary(
                '/KaraGateway/PutMeta',
                request_serializer=kara__storage__pb2.KaraRequest.SerializeToString,
                response_deserializer=kara__storage__pb2.KaraResponse.FromString,
                )


class KaraGatewayServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamDataset(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamObject(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMeta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutMeta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KaraGatewayServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamDataset': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamDataset,
                    request_deserializer=kara__storage__pb2.KaraRequest.FromString,
                    response_serializer=kara__storage__pb2.KaraResponse.SerializeToString,
            ),
            'StreamObject': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamObject,
                    request_deserializer=kara__storage__pb2.KaraRequest.FromString,
                    response_serializer=kara__storage__pb2.KaraResponse.SerializeToString,
            ),
            'GetMeta': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMeta,
                    request_deserializer=kara__storage__pb2.KaraRequest.FromString,
                    response_serializer=kara__storage__pb2.KaraResponse.SerializeToString,
            ),
            'PutMeta': grpc.unary_unary_rpc_method_handler(
                    servicer.PutMeta,
                    request_deserializer=kara__storage__pb2.KaraRequest.FromString,
                    response_serializer=kara__storage__pb2.KaraResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'KaraGateway', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KaraGateway(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamDataset(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/KaraGateway/StreamDataset',
            kara__storage__pb2.KaraRequest.SerializeToString,
            kara__storage__pb2.KaraResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamObject(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/KaraGateway/StreamObject',
            kara__storage__pb2.KaraRequest.SerializeToString,
            kara__storage__pb2.KaraResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMeta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/KaraGateway/GetMeta',
            kara__storage__pb2.KaraRequest.SerializeToString,
            kara__storage__pb2.KaraResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutMeta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/KaraGateway/PutMeta',
            kara__storage__pb2.KaraRequest.SerializeToString,
            kara__storage__pb2.KaraResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
